Differences or notes 
GENERAL NOTES:
in our full-stack applications, we were using one folder for the front and backend, and it was a React application using VITE, 
so we use the .cjs extension (common JS) for the backend files so that they would be interpreted correctly.

4 videos:
1. Learn the MERN Stack - Express and MongoDB Rest API
	https://youtu.be/-0exw-9YJBo?si=KrealFWmXFUB6Wdf 
2. Learn the MERN Stack - JWT Authentication
3. Learn the MERN Stack - Frontent Authentication| Redux Toolkit
4. Learn the MERN Stack - Redux Goals & Deploy

VIDEO 1 NOTES: 

Review RESTful routing
https://zatokey.medium.com/cheat-sheet-curd-fetch-api-1d1560d8e207
https://medium.com/@atharvakulkarniamk/restful-routing-mapping-rest-to-crud-dbb2f32f748c


after npm init
$ npm i express dotenv mongoose colors
$ npm i -D nodemon

most steps for initializing and setting up server are the same
be careful of spacing in the .env file, don't include them around the equals sign

NOTE: the file naming is a little bit different
-----
controllers/goalController.js
routes/goalRoutes.js
-----
VERSUS
-----
controllers/goals.js
routes/goals.js
-----

If you are using Postman, at 27 minutes in, when we are working on setting the first goal...
choose Body
then choose x-www-form-encoded
then key is text and value is "My First Goal"


$ npm i express-async-handler
using this instead of try{}catch(err){}

// ============ ONCE YOU GET TO THE MONGODB PART
// you don't need to install compass, you can check your database information online 
// you can skip the setup steps for the mongoDB atlas - all the way through the shared cluster
// you should have your username and password in the .env from one of your other applications 
the MONGO_URI is the same string we've been using in the .env to connect to the db, just update the name of the collection at the end
you can also add the 
?retryWrites=true&w=majority
if you don't have it

**** MAJOR NOTE ***
use:
    const deletedGoal = await Goal.findByIdAndDelete(req.params.id);
	rather than 
	await goal.remove();
    

	
you may not have seen this 
    const goal = await Goal.findById(req.params.id);

    if (!goal) {
        res.status(400);
        throw new Error('Goal not found');
    }
    
=================================================================================================================================
=================================================================================================================================

video 2 notes

=================================================================================================================================
=================================================================================================================================

Adding authentication using JWT

adding in the user model, routes, and controllers.  All of these should look pretty similar to the model, routes, controllers for the user in the 
mern-infrastructure example that we have.

npm i bcryptjs
npm i jsonwebtoken

you can check the data in the database in the web interface, you don't need to download compass


// if you kept the routes individual, your updated routes, with the protect, should look like this:
router.get('/', protect, getGoals);
router.post('/', protect, setGoal);
router.put('/:id', protect, updateGoal);
router.delete('/:id', protect, deleteGoal);

**** MAJOR NOTE ***
in the mern-infrastructure example, some things look different in the user model.
some of the fields in the models are different, but both user models do roughly the same things
in the class example, we did the hashing in the user model, rather than in the controller
some of the function names are different, but overall the functionality of the user model and the authentication 
and the authorization are pretty similar
you can also see that the protected routes use similar functionality, it's just that they are two different examples of routes 